---
Language:        Cpp

BasedOnStyle:  Google
# 访问声明符缩进
AccessModifierOffset: -4

# 开括号后的对齐(包括小括号/大括号/尖括号), 建议使用Align
# - Align: 对于开括号, 即在换行情况下, 换行的参数跟开括号对齐, 建议使用
# - DontAlign: 不对于开括号, 即换行时使用配置的空格数
# - AlwaysBreak: 永远换行, 即第一个参数都不允许粘连括号, 会强制换行, 换行后使用配置空格数对齐
# - BlockIndent: 同AlwaysBreak, 多了一个操作: 如果参数不固定在同一行, 闭括号将在下一行
AlignAfterOpenBracket: Align

# - 结构体数组统一初始化对齐,
# - None: 不做处理, 即保留开发者的代码
# - Left: 左对齐
# - Right: 右对齐
AlignArrayOfStructures: None

# 连续赋值语句的对齐，即多个赋值语句连续出现时的对齐策略配置, 包含多个子配置项
AlignConsecutiveAssignments:
  # 是否启用, 建议不启用
  Enabled:         false
  # 是否跨过空行, 即多个对齐语句中间有空行时, 是否跨过, 如果要开启连续赋值语句的配置, 建议为false
  AcrossEmptyLines: false
  # 是否跨过空行, 即多个对齐语句中间有空行时, 是否跨过, 如果要开启连续赋值语句的配置, 建议为false
  AcrossComments:  false
  # 是否跨过复合语句(包括空行及注释), 建议False
  AlignCompound:   false
  # 是否(右)对齐赋值操作的操作符, 建议true
  PadOperators:    true

# 同AlignConsecutiveAssignments, 表示连续位定义语句出现时, 是否需要对齐:符号, 位变量定义用得少, 可以不开启
AlignConsecutiveBitFields:
  # 是否启用, 建议不启用
  Enabled:         false
  # 同AlignConsecutiveAssignments
  AcrossEmptyLines: false
  # 同AlignConsecutiveAssignments
  AcrossComments:  false
  # 只在AlignConsecutiveAssignments配置中有效, 自动生成的clang-format有此项, 忽略
  AlignCompound:   false
  # 只在AlignConsecutiveAssignments配置中有效, 自动生成的clang-format有此项, 忽略
  PadOperators:    false

# 是否对齐连续声明, 同AlignConsecutiveDeclarations
AlignConsecutiveDeclarations:
  Enabled:         false
  AcrossEmptyLines: false
  AcrossComments:  false
  AlignCompound:   false
  PadOperators:    false

#
AlignConsecutiveMacros:
  Enabled:         false
  AcrossEmptyLines: false
  AcrossComments:  false
  AlignCompound:   false
  PadOperators:    false

# 续行符(\\)对齐:
# - DontAlign: 不做操作
# - Left: 尽可能向左对齐, 即最长一行代码为准
# - Right: 跟开发都写的最远的\\对齐(即不会自动缩减你的空格), 建议使用这个
AlignEscapedNewlines: Right

# 在二元/一元表达式中的操作数对齐, 可选值:
# - DontAlign: 不做对齐, 在操作数换行后, 将使用ContinuationIndentWidth来对齐
# - Align: 即换行时, 操作数(or 操作符加操作数)跟上一行的第一个操作数左对齐, 具体操作符要不要换行, 由BreakBeforeBinaryOperators配置决定
AlignOperands:   Align

# 对齐连续的尾随的注释
AlignTrailingComments:
  Kind:            Always
  OverEmptyLines:  0

#
AllowAllArgumentsOnNextLine: true

# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: true

# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: Never

# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false

# 允许短的枚举放在同一行
AllowShortEnumsOnASingleLine: false

# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: None

# 是否将简单的if(else/else if)语句中的body跟if(else/else if)放置于同一行，可选值
# - Never: 永远不, 建议值
# - WithoutElse: 没有else/else if时, 允许
# - OnlyFirstIf: 只有第一个if允许
# - AllIfAndElse: 所有的if/else都允许
AllowShortIfStatementsOnASingleLine: AllIfsAndElse

# 允许lambda在一行中，建议All
AllowShortLambdasOnASingleLine: All

# 是否允许loop语句体跟loop语句共行, true/false, 建议false
AllowShortLoopsOnASingleLine: false

# 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None

# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None

# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: false

# 模板声明换行风格, 可选值:
# - No: 永远不对开发者的风格作处理
# - MultiLine: 建议值, 即仅在开发者写的模板声明(包括函数)跨越多行时, 进行换行, 否则维持原样
# - Yes: 不管如何都进行分行, 不建议
AlwaysBreakTemplateDeclarations: MultiLine

# 属性宏列表, 自定义, 用于语言扩展或静态分析注解, 可忽略
AttributeMacros:
  - __capability

# 函数调用时的参数(Arguments)是否放置于一行, false不放置, true强制一个调用参数一行, 建议false
BinPackArguments: true

# 函数定义参数(Parameters)是否放置于一行, 同BinPackArguments
BinPackParameters: true

#
BitFieldColonSpacing: Both

# 大括号换行
BraceWrapping:
  # 在case后的大括号是否换行
  AfterCaseLabel:  true
  # class后
  AfterClass:      true
  # 控制语句(if/for/while/switch/...)后是否换行
  # - Never: 永远不, 即永远将语句体的大括号放置于控制语句同一行
  # - MultiLine: 多行控制语句才进行换行
  # - Always: 永远换行, 建议
  AfterControlStatement: Always
  # 下面比较容易理解, 不再作无意义的解释
  AfterEnum:       true
  AfterExternBlock: true
  AfterFunction:   true
  AfterNamespace:  true
  AfterObjCDeclaration: true
  AfterStruct:     true
  AfterUnion:      true
  BeforeCatch:     true
  BeforeElse:      true
  BeforeLambdaBody: true
  BeforeWhile:     false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

#
BreakAfterAttributes: Never

# Java注解相关, 跳过
BreakAfterJavaFieldAnnotations: false

#
BreakArrays:     true

# 在二元运算符前换行:
# - None: 在操作符后换行
# - NonAssignment: 在非赋值的操作符前换行
# - All: 在操作符前换行
BreakBeforeBinaryOperators: None

# 概念声明前是否换行, 建议Always
BreakBeforeConceptDeclarations: Always

# 大括号换行风格, Custom即可, 具体值可参考上方文档
BreakBeforeBraces: Custom

#
BreakBeforeInlineASMColon: OnlyMultiline

# 在三元运算符前换行
BreakBeforeTernaryOperators: true

# 继承列表换行风格
BreakConstructorInitializers: BeforeColon

# 是否将整个继承列表换行
BreakInheritanceList: BeforeColon

# 字面字符串是否换行, true
BreakStringLiterals: true

# 代码列字符上限, 0表示无上限
ColumnLimit:     120

# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas:  '^ IWYU pragma:'

#
CompactNamespaces: false

# 构造函数的初始化列表要么都在同一行，要么都各自一行
# ConstructorInitializerAllOnOneLineOrOnePerLine
# 构造函数初始化列表缩进
ConstructorInitializerIndentWidth: 4

# 延续的行的缩进宽度
ContinuationIndentWidth: 4

# C++11的统一初始化列表大括号风格, 建议true
Cpp11BracedListStyle: true

# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false

# 关闭格式化
DisableFormat:   false

# 访问限定后是否添加空行, 建议Never
EmptyLineAfterAccessModifier: Never

# 访问限定前是否要求空行, 建议LogicalBlock
EmptyLineBeforeAccessModifier: LogicalBlock

# 实验性的自动检测同行并进行操作, 建议false
ExperimentalAutoDetectBinPacking: false

# 是否强制在namespace结尾增加 // namespace xxx, 建议为true
FixNamespaceComments: true

# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

# If宏
IfMacros:
  - KJ_IF_MAYBE
IncludeBlocks:   Preserve

# include代码块操作, 前提是SortIncludes开启:
# - Preserve: 只对每个代码块排序
# - Merge: 对所有代码块合并, 并在合并后排序
# - Regroup: 对所有include块进行分析, 并重新分块, 不建议!
IncludeCategories:
  - Regex:           'stdafx.h'
    Priority:        0
    SortPriority:    0
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    1
    CaseSensitive:   false
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    1
    CaseSensitive:   false
  - Regex:           '.*'
    Priority:        1
    SortPriority:    1
    CaseSensitive:   false

#
IncludeIsMainRegex: '(Test)?$'

#
IncludeIsMainSourceRegex: ''

# 缩进访问控制
IndentAccessModifiers: false

# 缩进 case body
IndentCaseBlocks: false

# 缩进 case 标签
IndentCaseLabels: true

# extern "C"缩进, 建议AfterExternBlock
IndentExternBlock: AfterExternBlock

# 缩进goto标签
IndentGotoLabels: true

# 预处理指示(PPD-PreProcessor Directive)缩进
# - None: 不缩进
# - AfterHash: #不缩进, #后面的指示缩进
# - BeforeHash: #跟前缩进
IndentPPDirectives: None

# 模板require是否缩进
IndentRequiresClause: true

# 缩进宽度
IndentWidth:     4

# 函数名换行时, 是否缩进(即返回值跟名字不同行时), 建议false
IndentWrappedFunctionNames: false

# 是否在代码块中(if/else/for/do/while)强制插入大括号
InsertBraces:    true

# 是否在文件末尾强制插入换行
InsertNewlineAtEOF: true

# 是否强制插入拖尾的',', 建议为None
InsertTrailingCommas: None

#
IntegerLiteralSeparator:
  Binary:          0
  Decimal:         0
  Hex:             0

# Java相关, 跳过
JavaScriptQuotes: Leave
JavaScriptWrapImports: true

# 是否 block 开始前有一个空行
KeepEmptyLinesAtTheStartOfBlocks: true

#
LambdaBodyIndentation: Signature

#
LineEnding:      DeriveLF

# 宏开始的正则, 不使用
MacroBlockBegin: ''

# 宏结束的正则, 不使用
MacroBlockEnd:   ''

# 连续空行的最大数量
MaxEmptyLinesToKeep: 1

# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: None

# # Obj-C语言设置, 跳过
ObjCBinPackProtocolList: Auto
ObjCBlockIndentWidth: 2
ObjCBreakBeforeNestedBlockParam: true
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true

# 是否打包构造函数初始化列表
# - Never: 永远不做操作, 即一个参数一行
# - BinPack: 两个参数一行
# - CurrentLine: 所有参数放置于一行, 如果放不下, 就一个参数一行
# - NextLine: 同CurrentLine有点像, 唯一不同就是如果放不了一行, 将剩余参数放置于下一行(即不自动一参一行)
PackConstructorInitializers: NextLine

# 罚分设定(根据你的"违规"值选择罚分少的)
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 1000

# 指针对齐
PointerAlignment: Left

# 预处理对齐宽度
PPIndentWidth:   -1

# 注释关键字对齐(const/volatile), 建议Leave
# - Leave: - 不改变开发者定义
# - Left: 位于类型前
# - Right: 位于类型后
# - Custom: 自定义
QualifierAlignment: Leave

# 引用对齐, 可选:
# - Pointer: 使用'PointerAlignment'配置, 建议使用
# - Left: Left
# - Right: Right
ReferenceAlignment: Pointer

# 允许重新排版注释
ReflowComments:  true

# 是否移除多余的{}, 不建议
RemoveBracesLLVM: false

#
RemoveSemicolon: false

# 模板中的require语句位置, 建议OwnLine
RequiresClausePosition: OwnLine


RequiresExpressionIndentation: OuterScope
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1

# 允许排序#include
SortIncludes:    CaseSensitive

SortJavaStaticImport: Before
SortUsingDeclarations: LexicographicNumeric

# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false

SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default

# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true

# case语句:前是否增加space(true/false), 建议false
SpaceBeforeCaseColon: false

# c++11的统一初始化列表的大括号中是否添加space(true/false), 建议false
SpaceBeforeCpp11BracedList: false

# 构造函数初始化列表:前是否加space(true/false)
SpaceBeforeCtorInitializerColon: true

# 继承列表的:前是否加space(true/false), 建议true
SpaceBeforeInheritanceColon: true

# 圆括号前是否增加空格: 建议只在控制语句的贺括号前增加, 即配置为ControlStatements即可
SpaceBeforeParens: ControlStatements

# SpaceBeforeParens为Custom时使用
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDefinitionName: false
  AfterFunctionDeclarationName: false
  AfterIfMacros:   true
  AfterOverloadedOperator: false
  AfterRequiresInClause: false
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true

# 大括号内是否加space, false
SpaceBeforeSquareBrackets: false

# 空body是否添加space, 建议true
SpaceInEmptyBlock: true

# 圆括号前是否增加space, 建议false, true太多影响代码紧凑
SpaceInEmptyParentheses: false

# Trailing注释前的空格数, 建议1
SpacesBeforeTrailingComments: 1

# <>里面是否增加space, 不建议, 配置成Never即可
SpacesInAngles:  Never

# 条件语句()里面是否增加space, 不建议, 配置成Never即可
SpacesInConditionalStatement: false

# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: true

# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false

SpacesInLineCommentPrefix:
  Minimum:         1
  Maximum:         1

# 在圆括号的(后和)前添加空格
SpacesInParentheses: false

# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false

# 标准: Cpp03, Cpp11, Auto
Standard:        Latest

StatementAttributeLikeMacros:
  - Q_EMIT
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION

# Tab 宽度
TabWidth:        4

# Tab 使用, 建议 Never
UseTab:          Never
WhitespaceSensitiveMacros:
  - BOOST_PP_STRINGIZE
  - CF_SWIFT_NAME
  - NS_SWIFT_NAME
  - PP_STRINGIZE
  - STRINGIZE
